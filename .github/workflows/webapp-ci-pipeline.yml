name: WebApp CI Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
  workflow_dispatch: # Allow manual triggering for testing

jobs:
  run-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Environment
        uses: ./.github/actions/setup-environment
        with:
          node-version: '18'
      
      - name: Start MySQL
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          docker run --name mysql-test \
            -e MYSQL_ROOT_PASSWORD="${DB_PASSWORD}" \
            -e MYSQL_DATABASE="${DB_NAME}" \
            -p 3306:3306 \
            -d mysql:8.0
          
          # Wait for MySQL to start without exposing password in logs
          echo "Waiting for MySQL to start..."
          for i in {30..0}; do
            if docker exec mysql-test mysqladmin ping -h localhost -p"${DB_PASSWORD}" --silent 2>/dev/null; then
              echo "MySQL is up and running"
              break
            fi
            echo "Still waiting..."
            sleep 2
          done
          if [ "$i" = 0 ]; then
            echo "ERROR: MySQL failed to start"
            exit 1
          fi
          
      - name: Create Environment File
        run: |
          cat <<EOF > .env
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          PORT=${{ secrets.PORT }}
          S3_BUCKET_NAME=test-bucket
          EOF
          
      - name: Run Tests
        run: npm test
      
      - name: Report Test Status
        if: always()
        run: echo "::notice::Unit tests completed with status ${{ job.status }}"
        
      - name: Cleanup MySQL Container
        if: always()
        run: docker rm -f mysql-test || true

  validate_packer:
    name: Validate Packer Script
    runs-on: ubuntu-latest
    needs: run-tests
    if: success() || failure()
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Environment
        uses: ./.github/actions/setup-environment
        with:
          node-version: '18'
          install-pkg: 'true'
          install-packer: 'true'
        
      - name: Build Binary
        uses: ./.github/actions/build-binary
        with:
          output-path: 'infra/packer/dist'
          binary-name: 'webapp'
          node-version: '18'
      
      - name: Debug Information
        run: |
          echo "GitHub Ref: ${{ github.ref }}"
          echo "GitHub Event Name: ${{ github.event_name }}"
          echo "PR Number: ${{ github.event.number }}"
          echo "List workflow files:"
          find .github -type f | sort
          
      - name: Copy Service File to Packer Directory
        run: |
          # Ensure the packer directory exists
          mkdir -p infra/packer
          # Copy webapp.service to the packer directory
          cp infra/packer/webapp.service infra/packer/ || echo "Service file already in place"
      
      - name: Copy CloudWatch Files to Packer Directory
        run: |
          # Create CloudWatch setup script
          cat > infra/packer/cloudwatch-setup.sh << 'EOL'
          #!/bin/bash

          # Install CloudWatch Agent
          install_cloudwatch_agent() {
              echo "Installing CloudWatch Agent..."
              sudo apt-get update -y
              sudo apt-get install -y wget

              # Download the CloudWatch agent package
              wget https://amazoncloudwatch-agent.s3.amazonaws.com/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb

              # Install the package
              sudo dpkg -i -E ./amazon-cloudwatch-agent.deb

              # Cleanup
              rm ./amazon-cloudwatch-agent.deb
          }

          # Copy the config file to the proper location
          setup_cloudwatch_config() {
              echo "Setting up CloudWatch Agent configuration..."
              sudo mkdir -p /opt/aws/amazon-cloudwatch-agent/etc
              sudo cp /tmp/amazon-cloudwatch-config.json /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
              sudo chmod 644 /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          }

          # Enable CloudWatch agent on startup
          enable_cloudwatch_agent() {
              echo "Enabling CloudWatch Agent service..."
              sudo systemctl enable amazon-cloudwatch-agent
          }

          # Main execution
          main() {
              install_cloudwatch_agent
              setup_cloudwatch_config
              enable_cloudwatch_agent
              echo "CloudWatch Agent setup completed successfully!"
          }

          # Execute main function
          main
          EOL

          # Create CloudWatch agent configuration file
          cat > infra/packer/amazon-cloudwatch-config.json << 'EOL'
          {
            "agent": {
              "metrics_collection_interval": 60,
              "run_as_user": "root"
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/syslog",
                      "log_group_name": "{instance_id}-system-logs",
                      "log_stream_name": "syslog",
                      "timezone": "UTC"
                    },
                    {
                      "file_path": "/var/log/amazon/amazon-cloudwatch-agent/amazon-cloudwatch-agent.log",
                      "log_group_name": "{instance_id}-cloudwatch-agent-logs",
                      "log_stream_name": "amazon-cloudwatch-agent.log",
                      "timezone": "UTC"
                    },
                    {
                      "file_path": "/opt/csye6225/webapp.log",
                      "log_group_name": "{instance_id}-application-logs",
                      "log_stream_name": "webapp.log",
                      "timezone": "UTC"
                    }
                  ]
                }
              }
            },
            "metrics": {
              "namespace": "CSYE6225/Custom",
              "append_dimensions": {
                "InstanceId": "${aws:InstanceId}"
              },
              "metrics_collected": {
                "statsd": {
                  "service_address": ":8125",
                  "metrics_collection_interval": 10,
                  "metrics_aggregation_interval": 60
                },
                "cpu": {
                  "resources": ["*"],
                  "measurement": [
                    "cpu_usage_idle",
                    "cpu_usage_iowait",
                    "cpu_usage_user",
                    "cpu_usage_system"
                  ],
                  "totalcpu": true
                },
                "disk": {
                  "resources": ["*"],
                  "measurement": [
                    "used_percent",
                    "inodes_free"
                  ]
                },
                "diskio": {
                  "resources": ["*"],
                  "measurement": [
                    "io_time"
                  ]
                },
                "mem": {
                  "measurement": [
                    "mem_used_percent"
                  ]
                },
                "swap": {
                  "measurement": [
                    "swap_used_percent"
                  ]
                }
              }
            }
          }
          EOL

          # Make the script executable
          chmod +x infra/packer/cloudwatch-setup.sh
          
      - name: Initialize Packer
        working-directory: infra/packer
        run: packer init .
      
      - name: Check Packer Formatting
        working-directory: infra/packer
        run: |
          if packer fmt -check -diff .; then
            echo "Packer format is correct."
          else
            echo "Packer format check failed. Run 'packer fmt' locally to fix formatting."
            exit 1
          fi
      
      - name: Validate Packer Configuration
        working-directory: infra/packer
        run: |
          packer validate \
            -var "target_account_id=dummy-account" \
            -var "gcp_dev_project=dummy-project" \
            -var "gcp_target_project=dummy-project" \
            -var "aws_build_region=us-east-1" \
            -var "gcp_build_zone=us-east1-b" \
            -var "aws_vm_size=t2.micro" \
            -var "gcp_vm_type=e2-medium" \
            -var "gcp_storage_region=us" \
            machine-image.pkr.hcl
      
      - name: Workflow Summary
        if: always()
        run: |
          echo "## WebApp CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "* Unit Tests: ${{ needs.run-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "* Packer Validation: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "* Pull Request: #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY