name: Build Packer AMI and GCP Machine Image

on:
  pull_request:
    branches:
      - main

jobs:
  build_images:
    name: Build and Share AMI/Machine Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Project Dependencies
        run: npm ci

      - name: Install pkg Globally
        run: npm install -g pkg

      - name: build application executable
        run: |
          set -e  # Stop if any command fails
          
          # Create output directory if it doesn't exist
          mkdir -p infra/packer/dist
          
          # Build the executable
          pkg server.js --output infra/packer/dist/webapp --targets node18-linux-x64
          chmod +x infra/packer/dist/webapp
          
          # Verify build success
          if [ -f infra/packer/dist/webapp ]; then
            echo "Build complete! Binary located at infra/packer/dist/webapp"
          else
            echo "Build failed!"
            exit 1
          fi

      - name: Debug Build Output
        run: ls -lah infra/packer/dist/

      # AWS DEV Configuration
      - name: gcp aws credentials config
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_KEY }}
          aws-region: us-east-1

      # Setup GCP DEV credentials from JSON
      - name: gcp dev credentials config
        id: setup-gcp-dev
        run: |
          # Create credentials file
          echo '${{ secrets.DEV_GCP_KEY }}' > gcp-dev-credentials.json
          
          # Set environment variables for use in later steps
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/gcp-dev-credentials.json" >> $GITHUB_ENV
          echo "GCP_PROJECT_ID=$(echo '${{ secrets.DEV_GCP_KEY }}' | jq -r '.project_id')" >> $GITHUB_ENV

      # Setup GCP DEMO credentials for sharing
      - name: gcp demo credentials config
        id: setup-gcp-demo
        run: |
          # Create credentials file
          echo '${{ secrets.DEMO_GCP_KEY }}' > gcp-demo-credentials.json
          
          # Copy for use by migration script
          cp gcp-demo-credentials.json infra/packer/gcp-demo-credentials.json
          
          # Set environment variable for use in later steps
          echo "GCP_DEMO_PROJECT_ID=$(echo '${{ secrets.DEMO_GCP_KEY }}' | jq -r '.project_id')" >> $GITHUB_ENV

      # Setup AWS DEMO Account ID for sharing
      - name: configure aws account
        id: setup-aws-demo
        run: |
          # Temporarily use DEMO credentials to get account ID
          export AWS_ACCESS_KEY_ID=${{ secrets.DEMO_AWS_ACCESS_KEY }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.DEMO_AWS_SECRET_KEY }}
          
          # Get account ID and set as environment variable
          DEMO_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "DEMO_ACCOUNT_ID=${DEMO_ACCOUNT_ID}" >> $GITHUB_ENV
          echo "DEMO_ACCOUNT_ID: ${DEMO_ACCOUNT_ID}"
          
          # Switch back to DEV credentials for building
          unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY

      # Install and authenticate gcloud CLI with DEV credentials
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.DEV_GCP_KEY }}
          export_default_credentials: true

      - name: Authenticate User for GCP
        id: authenticate-gcp-user
        run: |
          # Extract client_email from the JSON credentials
          GCP_DEV_EMAIL=$(echo '${{ secrets.DEV_GCP_KEY }}' | jq -r '.client_email')

          # Authenticate the service account
          gcloud auth activate-service-account --key-file="gcp-dev-credentials.json"

          # Set the active account
          gcloud config set account ${GCP_DEV_EMAIL}
          
          # Set the active project
          gcloud config set project ${GCP_PROJECT_ID}

          # Export the email to the environment for later use
          echo "GCP_DEV_EMAIL=${GCP_DEV_EMAIL}" >> $GITHUB_ENV

      - name: Install Packer
        uses: hashicorp/setup-packer@v2
        with:
          version: latest

      - name: Initialize Packer
        working-directory: infra/packer
        run: packer init .

      - name: Build AMI and Machine Images
        working-directory: infra/packer
        run: |
          packer build \
            -var "demo_account_id=${DEMO_ACCOUNT_ID}" \
            -var "gcp_project_id=${GCP_PROJECT_ID}" \
            -var "gcp_demo_project_id=${GCP_DEMO_PROJECT_ID}" \
            machine-image.pkr.hcl

      # Run the GCP migration script after GCP Machine Image is verified
      - name: Copy MachineImage to Demo Account
        run: |
          echo "Running GCP migration script..."
          
          # Make the script executable
          chmod +x infra/packer/gcp_migration.sh
          
          # Run the script with zone parameter
          ./infra/packer/gcp_migration.sh us-east1-b
          
          # Verify the machine image in the DEMO project
          echo "Verifying Machine Image in DEMO project..."
          
          # Temporarily authenticate with DEMO credentials to verify
          gcloud auth activate-service-account --key-file="gcp-demo-credentials.json"
          gcloud config set project ${GCP_DEMO_PROJECT_ID}
          
          # List and verify images in DEMO project
          gcloud compute images list --project=${GCP_DEMO_PROJECT_ID} --filter="name:copy-custom-nodejs-mysql" --limit=5
          gcloud compute machine-images list --project=${GCP_DEMO_PROJECT_ID} --filter="name:mi-demo-custom-nodejs-mysql" --limit=5

      # Run the AMI migration script after AWS AMI is verified
      - name: Copy AMI to Demo Account
        run: |
          echo "Running AMI migration script..."
          
          # Create environment variables for the script
          export DEV_AWS_ACCESS_KEY_ID="${{ secrets.DEV_AWS_ACCESS_KEY }}"
          export DEV_AWS_SECRET_ACCESS_KEY="${{ secrets.DEV_AWS_SECRET_KEY }}"
          export DEMO_AWS_ACCESS_KEY_ID="${{ secrets.DEMO_AWS_ACCESS_KEY }}"
          export DEMO_AWS_SECRET_ACCESS_KEY="${{ secrets.DEMO_AWS_SECRET_KEY }}"
          
          # Make the script executable
          chmod +x infra/packer/ami_migration.sh
          
          # Run the script
          ./infra/packer/ami_migration.sh
          
          # Verify the AMI in the DEMO account
          echo "Verifying AMI copy in DEMO account..."
          
          # Temporarily use DEMO credentials to verify
          export AWS_ACCESS_KEY_ID=${{ secrets.DEMO_AWS_ACCESS_KEY }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.DEMO_AWS_SECRET_KEY }}
          
          # List and verify images in DEMO account
          aws ec2 describe-images --owners self --query 'Images[*].[ImageId,Name,CreationDate]' --output table | head -n 10

      # Clean up credentials after build
      - name: Clean Up Credentials
        if: always()
        run: |
          rm -f gcp-dev-credentials.json gcp-demo-credentials.json