name: Infrastructure Image Automation Pipeline

on:
  pull_request:
    branches:
      - main
    paths:
      - 'infra/packer/**'
      - '.github/workflows/packer-build.yml'
  workflow_dispatch:  # Manual execution option

# Runtime configuration parameters
env:
  WEBAPP_BINARY_PATH: "infra/packer/dist/webapp"

jobs:
  verify_application:
    name: Application Quality Verification
    runs-on: ubuntu-latest
    # Database service for integration testing
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Establish Database Connection
        run: |
          for i in {30..0}; do
            if mysqladmin ping -h 127.0.0.1 -uroot -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" --silent; then
              echo "Database connection established successfully"
              break
            fi
            echo "Establishing database connection - attempt $(( 30 - i + 1 ))/30"
            sleep 2
          done
          if [ "$i" = 0 ]; then
            echo "CRITICAL: Database initialization failed after multiple attempts"
            exit 1
          fi

      - name: Prepare Runtime Environment
        run: |
          cat <<EOF > .env
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_USER=${{ secrets.DB_USER }}
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          PORT=${{ secrets.PORT }}
          EOF

      - name: Install Dependencies
        run: npm ci

      - name: Perform Quality Checks
        run: npm test

  prepare_artifacts:
    name: Infrastructure Template Preparation
    runs-on: ubuntu-latest
    needs: verify_application  # Sequential dependency

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Packaging Utilities
        run: npm install -g pkg

      - name: Install Project Dependencies
        run: npm ci

      - name: Create Deployment Package
        run: |
          # Create output directory structure
          mkdir -p infra/packer/dist

          # Generate standalone application package
          pkg server.js --output ${{ env.WEBAPP_BINARY_PATH }} --targets node18-linux-x64

          # Set appropriate file permissions
          chmod +x ${{ env.WEBAPP_BINARY_PATH }}

          # Verify package creation
          if [ ! -f "${{ env.WEBAPP_BINARY_PATH }}" ]; then
            echo "CRITICAL: Deployment package generation failed - executable not found"
            exit 1
          fi

          echo "Deployment package successfully created at: ${{ env.WEBAPP_BINARY_PATH }}"
          echo "Package target: node18-linux-x64"

      - name: Setup Packer CLI
        uses: hashicorp/setup-packer@v2
        with:
          version: latest

      - name: Initialize Required Plugins
        working-directory: infra/packer
        run: packer init .

      - name: Check Configuration Standards
        working-directory: infra/packer
        run: |
          if packer fmt -check -diff .; then
            echo "Infrastructure code complies with formatting standards"
          else
            echo "ERROR: Infrastructure code does not comply with formatting standards"
            echo "Action required: Run 'packer fmt' locally to resolve formatting issues"
            exit 1
          fi

      - name: Validate Template Syntax
        working-directory: infra/packer
        run: packer validate machine-image.pkr.hcl

      - name: Store Deployment Assets
        uses: actions/upload-artifact@v3
        with:
          name: webapp-binary
          path: ${{ env.WEBAPP_BINARY_PATH }}
          retention-days: 1

  build_cloud_assets:
    name: Platform Image Generation
    runs-on: ubuntu-latest
    needs: prepare_artifacts
    environment: production  # Production credentials required

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Acquire Deployment Package
        uses: actions/download-artifact@v3
        with:
          name: webapp-binary
          path: infra/packer/dist

      - name: Set Execute Permissions
        run: chmod +x ${{ env.WEBAPP_BINARY_PATH }}

      - name: Confirm Package Availability
        run: ls -lah infra/packer/dist/

      - name: Setup Packer CLI
        uses: hashicorp/setup-packer@v2
        with:
          version: latest

      - name: Initialize Required Plugins
        working-directory: infra/packer
        run: packer init .

      # AWS authentication setup
      - name: Configure AWS Source Environment
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_KEY }}
          aws-region: us-east-1

      # GCP source environment setup
      - name: Configure GCP Source Environment
        id: setup-gcp-dev
        run: |
          echo '${{ secrets.DEV_GCP_KEY }}' > gcp-dev-credentials.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/gcp-dev-credentials.json" >> $GITHUB_ENV
          echo "GCP_PROJECT_ID=$(echo '${{ secrets.DEV_GCP_KEY }}' | jq -r '.project_id')" >> $GITHUB_ENV
          echo "GCP source environment configured successfully: ${GCP_PROJECT_ID}"

      # Configure destination environment references
      - name: Prepare GCP Destination Environment
        id: setup-gcp-demo
        run: |
          echo '${{ secrets.DEMO_GCP_KEY }}' > gcp-demo-credentials.json
          cp gcp-demo-credentials.json infra/packer/gcp-demo-credentials.json
          echo "GCP_DEMO_PROJECT_ID=$(echo '${{ secrets.DEMO_GCP_KEY }}' | jq -r '.project_id')" >> $GITHUB_ENV
          echo "GCP destination environment prepared: ${GCP_DEMO_PROJECT_ID}"

      # Retrieve AWS destination account reference
      - name: Identify AWS Destination Environment
        id: setup-aws-demo
        run: |
          # Temporary authentication context switch
          export AWS_ACCESS_KEY_ID=${{ secrets.DEMO_AWS_ACCESS_KEY }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.DEMO_AWS_SECRET_KEY }}
          
          # Extract account identifier for sharing configuration
          DEMO_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "DEMO_ACCOUNT_ID=${DEMO_ACCOUNT_ID}" >> $GITHUB_ENV
          echo "AWS destination account authenticated and identified: ${DEMO_ACCOUNT_ID}"
          
          # Restore source authentication context
          unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY

      # Setup GCP command-line tooling
      - name: Initialize GCP Management Tools
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.DEV_GCP_KEY }}
          export_default_credentials: true

      # Initiate multi-platform build process
      - name: Create Infrastructure Images
        working-directory: infra/packer
        run: |
          echo "Initiating multi-cloud image build process..."
          echo "AWS destination account: ${DEMO_ACCOUNT_ID}"
          echo "GCP source project: ${GCP_PROJECT_ID}"
          echo "GCP destination project: ${GCP_DEMO_PROJECT_ID}"
          
          packer build \
            -var "demo_account_id=${DEMO_ACCOUNT_ID}" \
            -var "gcp_project_id=${GCP_PROJECT_ID}" \
            -var "gcp_demo_project_id=${GCP_DEMO_PROJECT_ID}" \
            machine-image.pkr.hcl
          
          echo "Infrastructure image creation completed successfully"

  distribute_assets:
    name: Cross-Account Asset Distribution
    runs-on: ubuntu-latest
    needs: build_cloud_assets
    environment: production

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Source AWS authentication context
      - name: Configure AWS Source Environment
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_KEY }}
          aws-region: us-east-1

      # Source GCP authentication context
      - name: Configure GCP Source Environment
        run: |
          echo '${{ secrets.DEV_GCP_KEY }}' > gcp-dev-credentials.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/gcp-dev-credentials.json" >> $GITHUB_ENV
          echo "GCP_PROJECT_ID=$(echo '${{ secrets.DEV_GCP_KEY }}' | jq -r '.project_id')" >> $GITHUB_ENV
          echo "GCP source environment configured: ${GCP_PROJECT_ID}"

      # Destination GCP authentication context
      - name: Configure GCP Destination Environment
        run: |
          echo '${{ secrets.DEMO_GCP_KEY }}' > gcp-demo-credentials.json
          cp gcp-demo-credentials.json infra/packer/gcp-demo-credentials.json
          echo "GCP_DEMO_PROJECT_ID=$(echo '${{ secrets.DEMO_GCP_KEY }}' | jq -r '.project_id')" >> $GITHUB_ENV
          echo "GCP destination environment configured: ${GCP_DEMO_PROJECT_ID}"

      # Destination AWS authentication context
      - name: Identify AWS Destination Environment
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.DEMO_AWS_ACCESS_KEY }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.DEMO_AWS_SECRET_KEY }}
          DEMO_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "DEMO_ACCOUNT_ID=${DEMO_ACCOUNT_ID}" >> $GITHUB_ENV
          echo "AWS destination account authenticated: ${DEMO_ACCOUNT_ID}"
          unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY

      # GCP CLI initialization
      - name: Initialize GCP Management Tools
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.DEV_GCP_KEY }}
          export_default_credentials: true

      # Transfer GCP assets to destination
      - name: Execute GCP Asset Distribution
        run: |
          echo "Initiating GCP image distribution to target environment..."
          chmod +x infra/packer/gcp_migration.sh
          ./infra/packer/gcp_migration.sh us-east1-b
          
          echo "Verifying GCP image availability in target environment..."
          gcloud auth activate-service-account --key-file="gcp-demo-credentials.json"
          gcloud config set project ${GCP_DEMO_PROJECT_ID}
          gcloud compute images list --project=${GCP_DEMO_PROJECT_ID} --filter="name:copy-custom-nodejs-mysql" --limit=5
          echo "GCP image distribution completed successfully"

      # Transfer AWS assets to destination
      - name: Execute AWS Asset Distribution
        run: |
          echo "Initiating AWS AMI distribution to target account..."
          
          # Configure migration environment parameters
          export DEV_AWS_ACCESS_KEY_ID="${{ secrets.DEV_AWS_ACCESS_KEY }}"
          export DEV_AWS_SECRET_ACCESS_KEY="${{ secrets.DEV_AWS_SECRET_KEY }}"
          export DEMO_AWS_ACCESS_KEY_ID="${{ secrets.DEMO_AWS_ACCESS_KEY }}"
          export DEMO_AWS_SECRET_ACCESS_KEY="${{ secrets.DEMO_AWS_SECRET_KEY }}"
          
          # Perform migration operations
          chmod +x infra/packer/ami_migration.sh
          ./infra/packer/ami_migration.sh
          
          echo "Verifying AWS AMI availability in target account..."
          export AWS_ACCESS_KEY_ID=${{ secrets.DEMO_AWS_ACCESS_KEY }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.DEMO_AWS_SECRET_KEY }}
          aws ec2 describe-images --owners self --query 'Images[*].[ImageId,Name,CreationDate]' --output table | head -n 10
          echo "AWS AMI distribution completed successfully"

      # Credential security management
      - name: Purge Sensitive Authentication Data
        if: always()
        run: |
          echo "Performing security cleanup - removing credential files"
          rm -f gcp-dev-credentials.json gcp-demo-credentials.json
          echo "Credential cleanup completed"