name: Build and Migrate Infrastructure Images

on:
  push:
    branches:
      - main

jobs:
  infrastructure_image_pipeline:
    name: Create and Distribute Cloud Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Set up development environment
      - name: Setup Environment
        uses: ./.github/actions/setup-environment
        with:
          node-version: '18'
          install-pkg: 'true'
          install-packer: 'true'

      # Build application binary
      - name: Build Application Binary
        uses: ./.github/actions/build-binary
        with:
          output-path: 'infra/packer/dist'
          binary-name: 'webapp'
          node-version: '18'

      - name: Debug Build Output
        run: ls -lah infra/packer/dist/

      # Copy the webapp service file
      - name: Copy Service File
        run: |
          # Create webapp.service file in the packer directory
          cat > infra/packer/webapp.service << 'EOL'
          [Unit]
          Description=CSYE6225 Web Application
          After=network.target

          [Service]
          ExecStart=/opt/csye6225/webapp
          Restart=always
          User=csye6225
          Group=csye6225
          EnvironmentFile=/opt/csye6225/.env
          WorkingDirectory=/opt/csye6225
          StandardOutput=journal
          StandardError=journal

          [Install]
          WantedBy=multi-user.target
          EOL

      # Copy CloudWatch setup files
      - name: Copy CloudWatch Files
        run: |
          # Create CloudWatch setup script
          cat > infra/packer/cloudwatch-setup.sh << 'EOL'
          #!/bin/bash

          # Install CloudWatch Agent
          install_cloudwatch_agent() {
              echo "Installing CloudWatch Agent..."
              sudo apt-get update -y
              sudo apt-get install -y wget

              # Download the CloudWatch agent package
              wget https://amazoncloudwatch-agent.s3.amazonaws.com/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb

              # Install the package
              sudo dpkg -i -E ./amazon-cloudwatch-agent.deb

              # Cleanup
              rm ./amazon-cloudwatch-agent.deb
          }

          # Copy the config file to the proper location
          setup_cloudwatch_config() {
              echo "Setting up CloudWatch Agent configuration..."
              sudo mkdir -p /opt/aws/amazon-cloudwatch-agent/etc
              sudo cp /tmp/amazon-cloudwatch-config.json /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
              sudo chmod 644 /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          }

          # Enable CloudWatch agent on startup
          enable_cloudwatch_agent() {
              echo "Enabling CloudWatch Agent service..."
              sudo systemctl enable amazon-cloudwatch-agent
          }

          # Main execution
          main() {
              install_cloudwatch_agent
              setup_cloudwatch_config
              enable_cloudwatch_agent
              echo "CloudWatch Agent setup completed successfully!"
          }

          # Execute main function
          main
          EOL

          # Create CloudWatch agent configuration file
          cat > infra/packer/amazon-cloudwatch-config.json << 'EOL'
          {
            "agent": {
              "metrics_collection_interval": 60,
              "run_as_user": "root"
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/syslog",
                      "log_group_name": "{instance_id}-system-logs",
                      "log_stream_name": "syslog",
                      "timezone": "UTC"
                    },
                    {
                      "file_path": "/var/log/amazon/amazon-cloudwatch-agent/amazon-cloudwatch-agent.log",
                      "log_group_name": "{instance_id}-cloudwatch-agent-logs",
                      "log_stream_name": "amazon-cloudwatch-agent.log",
                      "timezone": "UTC"
                    },
                    {
                      "file_path": "/opt/csye6225/webapp.log",
                      "log_group_name": "{instance_id}-application-logs",
                      "log_stream_name": "webapp.log",
                      "timezone": "UTC"
                    }
                  ]
                }
              }
            },
            "metrics": {
              "namespace": "CSYE6225/Custom",
              "append_dimensions": {
                "InstanceId": "${aws:InstanceId}"
              },
              "metrics_collected": {
                "statsd": {
                  "service_address": ":8125",
                  "metrics_collection_interval": 10,
                  "metrics_aggregation_interval": 60
                },
                "cpu": {
                  "resources": ["*"],
                  "measurement": [
                    "cpu_usage_idle",
                    "cpu_usage_iowait",
                    "cpu_usage_user",
                    "cpu_usage_system"
                  ],
                  "totalcpu": true
                },
                "disk": {
                  "resources": ["*"],
                  "measurement": [
                    "used_percent",
                    "inodes_free"
                  ]
                },
                "diskio": {
                  "resources": ["*"],
                  "measurement": [
                    "io_time"
                  ]
                },
                "mem": {
                  "measurement": [
                    "mem_used_percent"
                  ]
                },
                "swap": {
                  "measurement": [
                    "swap_used_percent"
                  ]
                }
              }
            }
          }
          EOL

          # Make the script executable
          chmod +x infra/packer/cloudwatch-setup.sh

      # AWS DEV Configuration
      - name: Configure AWS Development Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_KEY }}
          aws-region: us-east-1

      # Setup GCP DEV credentials from JSON
      - name: Configure GCP Development Credentials
        id: setup-gcp-dev
        run: |
          # Create credentials file
          echo '${{ secrets.DEV_GCP_KEY }}' > gcp-dev-credentials.json
          
          # Set environment variables for use in later steps
          echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/gcp-dev-credentials.json" >> $GITHUB_ENV
          echo "GCP_PROJECT_ID=$(echo '${{ secrets.DEV_GCP_KEY }}' | jq -r '.project_id')" >> $GITHUB_ENV

      # Setup GCP DEMO credentials for sharing
      - name: Configure GCP Target Environment Credentials
        id: setup-gcp-demo
        run: |
          # Create credentials file
          echo '${{ secrets.DEMO_GCP_KEY }}' > gcp-demo-credentials.json
          
          # Copy for use by migration script
          cp gcp-demo-credentials.json infra/packer/gcp-demo-credentials.json
          
          # Set environment variable for use in later steps
          echo "GCP_DEMO_PROJECT_ID=$(echo '${{ secrets.DEMO_GCP_KEY }}' | jq -r '.project_id')" >> $GITHUB_ENV

      # Setup AWS DEMO Account ID for sharing
      - name: Identify AWS Target Account
        id: setup-aws-demo
        run: |
          # Temporarily use DEMO credentials to get account ID
          export AWS_ACCESS_KEY_ID=${{ secrets.DEMO_AWS_ACCESS_KEY }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.DEMO_AWS_SECRET_KEY }}
          
          # Get account ID and set as environment variable
          DEMO_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "DEMO_ACCOUNT_ID=${DEMO_ACCOUNT_ID}" >> $GITHUB_ENV
          echo "DEMO_ACCOUNT_ID: ${DEMO_ACCOUNT_ID}"
          
          # Switch back to DEV credentials for building
          unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY

      # Install and authenticate gcloud CLI with DEV credentials
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.DEV_GCP_KEY }}
          export_default_credentials: true

      - name: Authenticate GCP Service Account
        id: authenticate-gcp-user
        run: |
          # Extract client_email from the JSON credentials
          GCP_DEV_EMAIL=$(echo '${{ secrets.DEV_GCP_KEY }}' | jq -r '.client_email')

          # Authenticate the service account
          gcloud auth activate-service-account --key-file="gcp-dev-credentials.json"

          # Set the active account
          gcloud config set account ${GCP_DEV_EMAIL}
          
          # Set the active project
          gcloud config set project ${GCP_PROJECT_ID}

          # Export the email to the environment for later use
          echo "GCP_DEV_EMAIL=${GCP_DEV_EMAIL}" >> $GITHUB_ENV

      - name: Initialize Packer
        working-directory: infra/packer
        run: packer init .

      - name: Build Multi-Cloud Infrastructure Images
        working-directory: infra/packer
        run: |
          # First validate the template
          echo "Validating Packer template..."
          packer validate \
            -var "target_account_id=${DEMO_ACCOUNT_ID}" \
            -var "gcp_dev_project=${GCP_PROJECT_ID}" \
            -var "gcp_target_project=${GCP_DEMO_PROJECT_ID}" \
            -var "aws_build_region=us-east-1" \
            -var "gcp_build_zone=us-east1-b" \
            -var "aws_vm_size=t2.micro" \
            -var "gcp_vm_type=e2-medium" \
            -var "gcp_storage_region=us" \
            machine-image.pkr.hcl

          # Then build if validation succeeds
          echo "Building AMI and Machine images..."
          packer build \
            -var "target_account_id=${DEMO_ACCOUNT_ID}" \
            -var "gcp_dev_project=${GCP_PROJECT_ID}" \
            -var "gcp_target_project=${GCP_DEMO_PROJECT_ID}" \
            -var "aws_build_region=us-east-1" \
            -var "gcp_build_zone=us-east1-b" \
            -var "aws_vm_size=t2.micro" \
            -var "gcp_vm_type=e2-medium" \
            -var "gcp_storage_region=us" \
            machine-image.pkr.hcl

      # Run the GCP migration script after GCP Machine Image is verified
      - name: Migrate GCP Image to Target Environment
        run: |
          echo "Running GCP migration script..."
          
          # Make the script executable
          chmod +x infra/packer/gcp_migration.sh
          
          # Run the script with zone parameter
          ./infra/packer/gcp_migration.sh us-east1-b
          
          # Verify the machine image in the DEMO project
          echo "Verifying Machine Image in DEMO project..."
          
          # Temporarily authenticate with DEMO credentials to verify
          gcloud auth activate-service-account --key-file="gcp-demo-credentials.json"
          gcloud config set project ${GCP_DEMO_PROJECT_ID}
          
          # List and verify images in DEMO project
          gcloud compute images list --project=${GCP_DEMO_PROJECT_ID} --filter="name:copy-webapp-nodejs-rds-s3" --limit=5
          gcloud compute machine-images list --project=${GCP_DEMO_PROJECT_ID} --filter="name:mi-demo-webapp-nodejs-rds-s3" --limit=5

      # Run the AMI migration script after AWS AMI is verified
      - name: Migrate AWS AMI to Target Environment
        run: |
          echo "Running AMI migration script..."
          
          # Create environment variables for the script
          export DEV_AWS_ACCESS_KEY_ID="${{ secrets.DEV_AWS_ACCESS_KEY }}"
          export DEV_AWS_SECRET_ACCESS_KEY="${{ secrets.DEV_AWS_SECRET_KEY }}"
          export DEMO_AWS_ACCESS_KEY_ID="${{ secrets.DEMO_AWS_ACCESS_KEY }}"
          export DEMO_AWS_SECRET_ACCESS_KEY="${{ secrets.DEMO_AWS_SECRET_KEY }}"
          
          # Make the script executable
          chmod +x infra/packer/ami_migration.sh
          
          # Run the script
          ./infra/packer/ami_migration.sh
          
          # Verify the AMI in the DEMO account
          echo "Verifying AMI copy in DEMO account..."
          
          # Temporarily use DEMO credentials to verify
          export AWS_ACCESS_KEY_ID=${{ secrets.DEMO_AWS_ACCESS_KEY }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.DEMO_AWS_SECRET_KEY }}
          
          # List and verify images in DEMO account
          aws ec2 describe-images --owners self --query 'Images[*].[ImageId,Name,CreationDate]' --output table | head -n 10

      # Clean up credentials after build
      - name: Secure Credential Cleanup
        if: always()
        run: |
          rm -f gcp-dev-credentials.json gcp-demo-credentials.json