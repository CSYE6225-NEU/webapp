name: CI/CD Pipeline for Merged Pull Requests

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:  # For manual triggering during testing

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Set up development environment
      - name: Setup Environment
        uses: ./.github/actions/setup-environment
        with:
          node-version: '18'
          install-pkg: 'true'
          install-packer: 'true'

      # Build application binary
      - name: Build Application Binary
        uses: ./.github/actions/build-binary
        with:
          output-path: 'infra/packer/dist'
          binary-name: 'webapp'
          node-version: '18'

      - name: Debug Build Output
        run: ls -lah infra/packer/dist/

      # Copy the webapp service file
      - name: Copy Service File
        run: |
          # Create webapp.service file in the packer directory
          cat > infra/packer/webapp.service << 'EOL'
          [Unit]
          Description=CSYE6225 Web Application
          After=network.target

          [Service]
          ExecStart=/opt/csye6225/webapp
          Restart=always
          User=csye6225
          Group=csye6225
          EnvironmentFile=/opt/csye6225/.env
          WorkingDirectory=/opt/csye6225
          StandardOutput=journal
          StandardError=journal

          [Install]
          WantedBy=multi-user.target
          EOL

      # Copy CloudWatch setup files
      - name: Copy CloudWatch Files
        run: |
          # Create CloudWatch setup script
          cat > infra/packer/cloudwatch-setup.sh << 'EOL'
          #!/bin/bash

          # Install CloudWatch Agent
          install_cloudwatch_agent() {
              echo "Installing CloudWatch Agent..."
              sudo apt-get update -y
              sudo apt-get install -y wget

              # Download the CloudWatch agent package
              wget https://amazoncloudwatch-agent.s3.amazonaws.com/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb

              # Install the package
              sudo dpkg -i -E ./amazon-cloudwatch-agent.deb

              # Cleanup
              rm ./amazon-cloudwatch-agent.deb
          }

          # Copy the config file to the proper location
          setup_cloudwatch_config() {
              echo "Setting up CloudWatch Agent configuration..."
              sudo mkdir -p /opt/aws/amazon-cloudwatch-agent/etc
              sudo cp /tmp/amazon-cloudwatch-config.json /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
              sudo chmod 644 /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
          }

          # Enable CloudWatch agent on startup
          enable_cloudwatch_agent() {
              echo "Enabling CloudWatch Agent service..."
              sudo systemctl enable amazon-cloudwatch-agent
          }

          # Main execution
          main() {
              install_cloudwatch_agent
              setup_cloudwatch_config
              enable_cloudwatch_agent
              echo "CloudWatch Agent setup completed successfully!"
          }

          # Execute main function
          main
          EOL

          # Create CloudWatch agent configuration file
          cat > infra/packer/amazon-cloudwatch-config.json << 'EOL'
          {
            "agent": {
              "metrics_collection_interval": 60,
              "run_as_user": "root"
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/syslog",
                      "log_group_name": "{instance_id}-system-logs",
                      "log_stream_name": "syslog",
                      "timezone": "UTC"
                    },
                    {
                      "file_path": "/var/log/amazon/amazon-cloudwatch-agent/amazon-cloudwatch-agent.log",
                      "log_group_name": "{instance_id}-cloudwatch-agent-logs",
                      "log_stream_name": "amazon-cloudwatch-agent.log",
                      "timezone": "UTC"
                    },
                    {
                      "file_path": "/opt/csye6225/webapp.log",
                      "log_group_name": "{instance_id}-application-logs",
                      "log_stream_name": "webapp.log",
                      "timezone": "UTC"
                    }
                  ]
                }
              }
            },
            "metrics": {
              "namespace": "CSYE6225/Custom",
              "append_dimensions": {
                "InstanceId": "${aws:InstanceId}"
              },
              "metrics_collected": {
                "statsd": {
                  "service_address": ":8125",
                  "metrics_collection_interval": 10,
                  "metrics_aggregation_interval": 60
                },
                "cpu": {
                  "resources": ["*"],
                  "measurement": [
                    "cpu_usage_idle",
                    "cpu_usage_iowait",
                    "cpu_usage_user",
                    "cpu_usage_system"
                  ],
                  "totalcpu": true
                },
                "disk": {
                  "resources": ["*"],
                  "measurement": [
                    "used_percent",
                    "inodes_free"
                  ]
                },
                "diskio": {
                  "resources": ["*"],
                  "measurement": [
                    "io_time"
                  ]
                },
                "mem": {
                  "measurement": [
                    "mem_used_percent"
                  ]
                },
                "swap": {
                  "measurement": [
                    "swap_used_percent"
                  ]
                }
              }
            }
          }
          EOL

          # Make the script executable
          chmod +x infra/packer/cloudwatch-setup.sh

      # AWS DEV Configuration
      - name: Configure AWS Development Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_KEY }}
          aws-region: us-east-1

      # GCP related steps (commented out but kept for reference)
      # ------------------------------------------------------------
      # # Setup GCP DEV credentials from JSON
      # - name: Configure GCP Development Credentials
      #   id: setup-gcp-dev
      #   run: |
      #     # Create credentials file
      #     echo '${{ secrets.DEV_GCP_KEY }}' > gcp-dev-credentials.json
      #     
      #     # Set environment variables for use in later steps
      #     echo "GOOGLE_APPLICATION_CREDENTIALS=$(pwd)/gcp-dev-credentials.json" >> $GITHUB_ENV
      #     echo "GCP_PROJECT_ID=$(echo '${{ secrets.DEV_GCP_KEY }}' | jq -r '.project_id')" >> $GITHUB_ENV

      # # Setup GCP DEMO credentials for sharing
      # - name: Configure GCP Target Environment Credentials
      #   id: setup-gcp-demo
      #   run: |
      #     # Create credentials file
      #     echo '${{ secrets.DEMO_GCP_KEY }}' > gcp-demo-credentials.json
      #     
      #     # Copy for use by migration script
      #     cp gcp-demo-credentials.json infra/packer/gcp-demo-credentials.json
      #     
      #     # Set environment variable for use in later steps
      #     echo "GCP_DEMO_PROJECT_ID=$(echo '${{ secrets.DEMO_GCP_KEY }}' | jq -r '.project_id')" >> $GITHUB_ENV
      # ------------------------------------------------------------

      # Setup AWS DEMO Account ID for sharing
      - name: Identify AWS Target Account
        id: setup-aws-demo
        run: |
          # Temporarily use DEMO credentials to get account ID
          export AWS_ACCESS_KEY_ID=${{ secrets.DEMO_AWS_ACCESS_KEY }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.DEMO_AWS_SECRET_KEY }}
          
          # Get account ID and set as environment variable
          DEMO_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "DEMO_ACCOUNT_ID=${DEMO_ACCOUNT_ID}" >> $GITHUB_ENV
          echo "DEMO_ACCOUNT_ID: ${DEMO_ACCOUNT_ID}"
          
          # Switch back to DEV credentials for building
          unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY

      # GCP related steps (commented out but kept for reference)
      # ------------------------------------------------------------
      # # Install and authenticate gcloud CLI with DEV credentials
      # - name: Set up Cloud SDK
      #   uses: google-github-actions/setup-gcloud@v1
      #   with:
      #     service_account_key: ${{ secrets.DEV_GCP_KEY }}
      #     export_default_credentials: true

      # - name: Authenticate GCP Service Account
      #   id: authenticate-gcp-user
      #   run: |
      #     # Extract client_email from the JSON credentials
      #     GCP_DEV_EMAIL=$(echo '${{ secrets.DEV_GCP_KEY }}' | jq -r '.client_email')

      #     # Authenticate the service account
      #     gcloud auth activate-service-account --key-file="gcp-dev-credentials.json"

      #     # Set the active account
      #     gcloud config set account ${GCP_DEV_EMAIL}
      #     
      #     # Set the active project
      #     gcloud config set project ${GCP_PROJECT_ID}

      #     # Export the email to the environment for later use
      #     echo "GCP_DEV_EMAIL=${GCP_DEV_EMAIL}" >> $GITHUB_ENV
      # ------------------------------------------------------------

      - name: Initialize Packer
        working-directory: infra/packer
        run: packer init .

      # Build infrastructure images
      - name: Build AWS Infrastructure Image
        working-directory: infra/packer
        run: |
          # First validate the template
          echo "Validating Packer template..."
          packer validate \
            -var "target_account_id=${DEMO_ACCOUNT_ID}" \
            -var "aws_build_region=us-east-1" \
            -var "aws_vm_size=t2.micro" \
            machine-image.pkr.hcl

          # Then build AWS image (exclude GCP build)
          echo "Building AMI..."
          packer build \
            -only=amazon-ebs.ubuntu \
            -var "target_account_id=${DEMO_ACCOUNT_ID}" \
            -var "aws_build_region=us-east-1" \
            -var "aws_vm_size=t2.micro" \
            machine-image.pkr.hcl

      # GCP related steps (commented out but kept for reference)
      # ------------------------------------------------------------
      # - name: Build GCP Infrastructure Image
      #   working-directory: infra/packer
      #   run: |
      #     # Build GCP image
      #     echo "Building GCP image..."
      #     packer build \
      #       -only=googlecompute.ubuntu \
      #       -var "gcp_dev_project=${GCP_PROJECT_ID}" \
      #       -var "gcp_target_project=${GCP_DEMO_PROJECT_ID}" \
      #       -var "gcp_build_zone=us-east1-b" \
      #       -var "gcp_vm_type=e2-medium" \
      #       -var "gcp_storage_region=us" \
      #       machine-image.pkr.hcl

      # # Run the GCP migration script after GCP Machine Image is verified
      # - name: Migrate GCP Image to Target Environment
      #   run: |
      #     echo "Running GCP migration script..."
      #     
      #     # Make the script executable
      #     chmod +x infra/packer/gcp_migration.sh
      #     
      #     # Run the script with zone parameter
      #     ./infra/packer/gcp_migration.sh us-east1-b
      #     
      #     # Verify the machine image in the DEMO project
      #     echo "Verifying Machine Image in DEMO project..."
      #     
      #     # Temporarily authenticate with DEMO credentials to verify
      #     gcloud auth activate-service-account --key-file="gcp-demo-credentials.json"
      #     gcloud config set project ${GCP_DEMO_PROJECT_ID}
      #     
      #     # List and verify images in DEMO project
      #     gcloud compute images list --project=${GCP_DEMO_PROJECT_ID} --filter="name:copy-webapp-nodejs-rds-s3" --limit=5
      #     gcloud compute machine-images list --project=${GCP_DEMO_PROJECT_ID} --filter="name:mi-demo-webapp-nodejs-rds-s3" --limit=5
      # ------------------------------------------------------------

      # Get the latest AMI ID
      - name: Get Latest AMI ID
        id: get-ami
        run: |
          LATEST_AMI=$(aws ec2 describe-images \
            --owners self \
            --filters "Name=name,Values=webapp-nodejs-rds-s3-cloudwatch-*" \
            --query 'sort_by(Images, &CreationDate)[-1].ImageId' \
            --output text)
          echo "latest_ami_id=$LATEST_AMI" >> $GITHUB_OUTPUT
          echo "Latest AMI ID: $LATEST_AMI"

      # Share AMI with DEMO account
      - name: Share AMI with DEMO Account
        run: |
          AMI_ID=${{ steps.get-ami.outputs.latest_ami_id }}
          aws ec2 modify-image-attribute \
            --image-id $AMI_ID \
            --launch-permission "Add=[{UserId=${{ env.DEMO_ACCOUNT_ID }}}]"
          
          # Get Snapshot ID for the AMI
          SNAPSHOT_ID=$(aws ec2 describe-images \
            --image-ids $AMI_ID \
            --query 'Images[0].BlockDeviceMappings[0].Ebs.SnapshotId' \
            --output text)
          
          # Share the snapshot
          aws ec2 modify-snapshot-attribute \
            --snapshot-id $SNAPSHOT_ID \
            --attribute createVolumePermission \
            --operation-type add \
            --user-ids ${{ env.DEMO_ACCOUNT_ID }}

      # Run the AMI migration script
      - name: Migrate AWS AMI to Target Environment
        run: |
          echo "Running AMI migration script..."
          
          # Create environment variables for the script
          export DEV_AWS_ACCESS_KEY_ID="${{ secrets.DEV_AWS_ACCESS_KEY }}"
          export DEV_AWS_SECRET_ACCESS_KEY="${{ secrets.DEV_AWS_SECRET_KEY }}"
          export DEMO_AWS_ACCESS_KEY_ID="${{ secrets.DEMO_AWS_ACCESS_KEY }}"
          export DEMO_AWS_SECRET_ACCESS_KEY="${{ secrets.DEMO_AWS_SECRET_KEY }}"
          
          # Make the script executable
          chmod +x infra/packer/ami_migration.sh
          
          # Run the script
          ./infra/packer/ami_migration.sh
          
          # Verify the AMI in the DEMO account
          echo "Verifying AMI copy in DEMO account..."
          
          # Temporarily use DEMO credentials to verify
          export AWS_ACCESS_KEY_ID=${{ secrets.DEMO_AWS_ACCESS_KEY }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.DEMO_AWS_SECRET_KEY }}
          
          # List and verify images in DEMO account
          aws ec2 describe-images --owners self --query 'Images[*].[ImageId,Name,CreationDate]' --output table | head -n 10

      # NEW STEP: Configure AWS DEMO Credentials formally
      - name: Configure AWS DEMO Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_KEY }}
          aws-region: us-east-1
      
      # Create Launch Template Version
      - name: Create New Launch Template Version
        id: create-lt-version
        run: |
          AMI_ID=${{ steps.get-ami.outputs.latest_ami_id }}
          
          # Debug - List all available launch templates
          echo "Listing all available launch templates..."
          aws ec2 describe-launch-templates --query 'LaunchTemplates[*].[LaunchTemplateId,LaunchTemplateName]' --output table
          
          # Get the current Launch Template with better error handling
          echo "Retrieving launch template ID..."
          LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates \
            --filters "Name=launch-template-name,Values=csye6225_asg" \
            --query 'LaunchTemplates[0].LaunchTemplateId' \
            --output text)
          
          # Check if we got a valid ID
          if [ "$LAUNCH_TEMPLATE_ID" == "None" ] || [ -z "$LAUNCH_TEMPLATE_ID" ]; then
            echo "Error: Could not find launch template with name 'csye6225_asg'"
            echo "Please verify the launch template name in your Terraform configuration matches 'csye6225_asg'"
            exit 1
          fi
          
          echo "Found launch template ID: $LAUNCH_TEMPLATE_ID"
          
          # Create a new Launch Template Version with the new AMI
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id $LAUNCH_TEMPLATE_ID \
            --version-description "New version with updated AMI" \
            --source-version '$Latest' \
            --launch-template-data '{"ImageId":"'$AMI_ID'"}' \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "launch_template_id=$LAUNCH_TEMPLATE_ID" >> $GITHUB_OUTPUT
          echo "Created Launch Template Version: $NEW_VERSION"
      
      # Get ASG Name
      - name: Get Auto Scaling Group Name
        id: get-asg
        run: |
          # List all Auto Scaling Groups
          echo "Listing all available Auto Scaling Groups..."
          aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[*].AutoScalingGroupName' --output table
          
          # Try to find our ASG by name tag pattern
          ASG_NAME=$(aws autoscaling describe-auto-scaling-groups \
            --query 'AutoScalingGroups[?contains(Tags[?Key==`Name`].Value, `WebApp-ASG`)].AutoScalingGroupName' \
            --output text)
          
          # If not found, try without filtering for specific tag
          if [ -z "$ASG_NAME" ]; then
            echo "No ASG found with Name tag containing 'WebApp-ASG'."
            echo "Trying to find ASG by launch template ID..."
            ASG_NAME=$(aws autoscaling describe-auto-scaling-groups \
              --query 'AutoScalingGroups[?LaunchTemplate.LaunchTemplateId==`'${{ steps.create-lt-version.outputs.launch_template_id }}'`].AutoScalingGroupName' \
              --output text)
          fi
          
          # Check if we found an ASG
          if [ -z "$ASG_NAME" ]; then
            echo "Error: Could not find Auto Scaling Group."
            echo "Please verify your Auto Scaling Group configuration."
            exit 1
          fi
          
          echo "asg_name=$ASG_NAME" >> $GITHUB_OUTPUT
          echo "Auto Scaling Group Name: $ASG_NAME"
      
      # Set Default Launch Template Version
      - name: Set Default Launch Template Version
        run: |
          aws ec2 modify-launch-template \
            --launch-template-id ${{ steps.create-lt-version.outputs.launch_template_id }} \
            --default-version ${{ steps.create-lt-version.outputs.new_version }}
      
      # Start Instance Refresh
      - name: Start Instance Refresh
        id: refresh
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ steps.get-asg.outputs.asg_name }} \
            --preferences '{"MinHealthyPercentage": 90, "InstanceWarmup": 300}' \
            --query 'InstanceRefreshId' \
            --output text)
          
          echo "refresh_id=$REFRESH_ID" >> $GITHUB_OUTPUT
          echo "Started Instance Refresh: $REFRESH_ID"
      
      # Wait for Instance Refresh to Complete
      - name: Wait for Instance Refresh
        run: |
          REFRESH_ID=${{ steps.refresh.outputs.refresh_id }}
          ASG_NAME=${{ steps.get-asg.outputs.asg_name }}
          
          echo "Waiting for Instance Refresh to complete..."
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name $ASG_NAME \
              --instance-refresh-ids $REFRESH_ID \
              --query 'InstanceRefreshes[0].Status' \
              --output text)
            
            echo "Current status: $STATUS"
            
            if [ "$STATUS" == "Successful" ]; then
              echo "Instance Refresh completed successfully!"
              break
            elif [ "$STATUS" == "Failed" ] || [ "$STATUS" == "Cancelled" ]; then
              echo "Instance Refresh failed or was cancelled"
              exit 1
            fi
            
            echo "Waiting 30 seconds before checking again..."
            sleep 30
          done

      # Clean up credentials after build
      - name: Secure Credential Cleanup
        if: always()
        run: |
          rm -f gcp-dev-credentials.json gcp-demo-credentials.json